{"version":3,"sources":["utils.ts","main.ts"],"names":[],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,MAAM,EAAS,GAAiB,IAAI,QAAS,GAAQ,WAAW,EAAK,IAArE,QAAA,MAAA;;AC8BP,aA9BA,IAAA,EAAA,QAAA,WAGA,MAAM,EAAiB,SAAS,iBAAiB,SAAS,iBAAiB,iBAAiB,sBACtF,EAAc,EAAiB,OAE/B,EAAW,IAEX,EAAW,SAAS,eAAe,YACnC,EAAkB,GACxB,IAAI,GAAU,EAEd,SAAS,iBAAiB,sBAAsB,QAAS,IACxC,EACR,iBAAiB,QAAS,MAAA,IAC3B,GAAA,EAAM,kBAAkB,QAAS,CAAA,IAAA,EAC7B,MAAA,EAAS,EAAM,OACf,EAAQ,SAAS,EAAO,QAAQ,OACjB,SAAmC,QAA1B,EAAA,EAAS,QAAQ,aAAS,IAAA,EAAA,EAAA,MAEpC,GAAU,EAAM,SAAS,KAC3C,EAAM,KAAK,GACX,EAAO,UAAU,OAAO,kBAExB,UAMR,MAAM,EAAO,UACP,IAAA,EAAA,CACJ,GAAU,EAEP,EAAA,CAAA,IAAA,EACK,MAAA,EAAQ,EAAM,GACd,EAAe,SAAmC,QAA1B,EAAA,EAAS,QAAQ,aAAS,IAAA,EAAA,EAAA,KAExD,QAAQ,gBAAgB,KAExB,EAAS,QAAQ,SAAW,UACtB,EAAS,QAAQ,CAAC,CAAE,yBAA0B,EAAc,QAAqB,CAAE,yBAA0B,EAAc,SAAe,CAC9I,SAAU,IAAM,KAAK,IAAI,EAAQ,GACjC,KAAM,WACN,OAAQ,gBACP,SAEH,EAAM,QACN,SAAS,uCAAuC,OAAW,QAAS,GAAW,EAAO,UAAU,IAAI,yBAE9F,EAAM,EAAA,OA5CC,WA6CN,EAAM,OAAS,GAExB,QAAQ,IAAI,QAAU,GACtB,GAAU","file":"main.02da7689.js","sourceRoot":"../src","sourcesContent":["export const delay = (time: number) => new Promise((res) => setTimeout(res, time))","import { delay } from './utils'\n\ndeclare var floors: number\nconst buildingHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--building-height'))\nconst floorHeight = buildingHeight / floors\n\nconst waitTime = 1000\n\nconst elevator = document.getElementById('elevator') as HTMLDivElement\nconst queue: number[] = []\nlet working = false\n\ndocument.querySelectorAll('button[data-floor]').forEach((element) => {\n  const button = element as HTMLButtonElement\n  button.addEventListener('click', async (event) => {\n    if (event.target instanceof Element) {\n      const button = event.target as HTMLButtonElement\n      const floor = parseInt(button.dataset.floor!)\n      const currentFloor = parseInt(elevator.dataset.floor ?? '0')\n\n      if (currentFloor != floor && !queue.includes(floor)) {\n        queue.push(floor)\n        button.classList.remove('button-outline')\n\n        work()\n      }\n    }\n  })\n})\n\nconst work = async () => {\n  if (working) return\n  working = true\n\n  do {\n    const floor = queue[0]\n    const currentFloor = parseInt(elevator.dataset.floor ?? '0')\n\n    console.log(`Going to ${floor}`)\n\n    elevator.dataset.floor = `${floor}`\n    await elevator.animate([{ transform: `translateY(${-floorHeight * currentFloor}px)` }, { transform: `translateY(${-floorHeight * floor}px)` }], {\n      duration: 500 * Math.abs(floor - currentFloor),\n      fill: 'forwards',\n      easing: 'ease-in-out',\n    }).finished\n\n    queue.shift()\n    document.querySelectorAll(`button[data-floor=\"${floor}\"]`).forEach((button) => button.classList.add('button-outline'))\n\n    await delay(waitTime)\n  } while (queue.length > 0)\n\n  console.log('Done?' + queue)\n  working = false\n}\n"]}